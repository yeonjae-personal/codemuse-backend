buildscript {
    ext {
        springBootVersion = '3.2.12'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.sonarqube" version "4.0.0.2929"  // SonarQube Gradle 플러그인 추가
}

def profile = project.hasProperty('profile') ? project.getProperty('profile') : 'local'
println "targetProfile: $profile"

allprojects {
    repositories {
        maven {
            url 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url 'https://plugins.gradle.org/m2'
        }
        maven {
            if(profile == 'local'){
                url 'http://3.39.251.160:8081/repository/maven-public/'
            }
            else{
                url 'http://172.16.0.52:8081/repository/maven-public/'
            }   
            allowInsecureProtocol = true
        }
    }

    			group = 'com.lgcns.svcp.prod'
                version = '1.0'

                apply plugin: 'org.springframework.boot'
                apply plugin: 'io.spring.dependency-management'
                apply plugin: 'java'
                apply plugin: "eclipse"
                apply plugin: 'org.sonarqube'

                sourceCompatibility = '21'
                targetCompatibility = '21'
                
                dependencyManagement {
                    imports {                        
                        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:3.1.1"
                    }
                }

                configurations.all {
                    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
                }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
//    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'

    // PostgreSQL 추가
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation group: 'org.apache.poi', name: 'poi', version: '5.3.0'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.3.0'
    
    implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:2.1.1'
    
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'
    
    implementation group: 'org.jeasy', name: 'easy-rules-core', version: '4.1.0'
    
    implementation('org.springframework.boot:spring-boot-starter') {
    	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.apache.tika:tika-core:2.9.0'
    
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
}

test {
    useJUnitPlatform()
}

bootJar{
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

configurations {
    all {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'lena'
    }
}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Ui-publish">
   <select id="searchChngDataDetail" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.item.ChngDataListLDto">
	    SELECT
		 	a.chng_data_seq      
		    , a.chng_data_code     
		    , a.chng_data_code_name
		    , a.chng_data_obj_uuid
		    , a.chng_data_item_code
		    , a.chng_data_type_code
		    , a.chng_data_stus_code
		    , a.chng_data_rqst_user
		    , a.call_api_url       
		    , a.call_api_method    
		    , a.call_api_query     
		    , a.call_api_body      
		    , a.rgst_user          
		    , a.rgst_dtm           
		    , a.upd_user           
		    , a.upd_dtm             
	    FROM
	        tb_chng_data_list_l a
	    <where>
	    	UPPER(a.chng_data_stus_code) IN ('SAVED', 'PACKED')
			<if test="chngDataCode != null">
			    AND a.chng_data_code ILIKE CONCAT('%', #{chngDataCode}, '%')
			</if>
			<if test="chngDataCodeName != null">
			    AND a.chng_data_code_name ILIKE CONCAT('%', #{chngDataCodeName}, '%')
			</if>
	        <if test="chgDeptName != null">
	            AND a.chng_data_rqst_dept_name ILIKE CONCAT('%', #{chgDeptName}, '%')
	        </if>
	        <if test="chgUser != null">
	            AND a.chng_data_rqst_user ILIKE CONCAT('%', #{chgUser}, '%')
	        </if>
	    </where>
	</select>
	
	<select id="searchPubRqstTaskMaster" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.packages.PubRqstTaskMDto">
	    SELECT
	        a.pub_rqst_task_code        
	        , a.pub_rqst_task_code_name   
	        , a.pub_rqst_task_pubr        
	        , a.pub_rqst_task_pubr_dept_cd
	        , a.pub_rqst_stus_code   
	        , a.pub_rqst_bfr_stus_code
	        , a.pub_prcs_type_code     
	        , a.crte_dtm                 
	        , a.vldate_dtm               
	        , a.dued_dtm                 
	        , a.expr_dtm                 
	        , a.rgst_user                
	        , a.rgst_dtm                 
	        , a.upd_user                 
	        , a.upd_dtm                  
	    FROM
	        tb_pub_rqst_task_m a
	    <where>
			<if test="pubRqstTaskCode != null">
			    AND a.pub_rqst_task_code ILIKE CONCAT('%', #{pubRqstTaskCode}, '%')
			</if>
			<if test="pubRqstTaskCodeName != null">
			    AND a.pub_rqst_task_code_name ILIKE CONCAT('%', #{pubRqstTaskCodeName}, '%')
			</if>
			<if test="pubRqstTaskPubr != null">
			    AND a.pub_rqst_task_pubr ILIKE CONCAT('%', #{pubRqstTaskPubr}, '%')
			</if>
			<if test="pubRqstStusCode != null">
	            <choose>
	                <when test="pubRqstStusCode == 'E'.toString()">
	                    <![CDATA[ a.expr_dtm <= CURRENT_TIMESTAMP ]]>
	                </when>
	                <otherwise>
	                    AND a.pub_rqst_stus_code = #{pubRqstStusCode}
	                </otherwise>
	            </choose>
	        </if>
	    </where>
	    ORDER BY
	    	a.upd_dtm DESC
	</select>
	
 	<select id="generateNextPubRqstTaskCode" resultType="String">
	    SELECT
	        'PUBL' || LPAD((COALESCE(MAX(SUBSTRING(pub_rqst_task_code, 5)::INTEGER), 0) + 1)::TEXT, 6, '0') AS next_pub_rqst_task_code
	    FROM
	        TB_PUB_RQST_TASK_M
	</select>
	
	<select id="pubRqstTaskMIsExpr" resultType="boolean">
	    SELECT
	       <![CDATA[
	         COALESCE(a.expr_dtm < CURRENT_TIMESTAMP, FALSE)
	       ]]>
	    FROM tb_pub_rqst_task_m a
	    WHERE a.pub_rqst_task_code = #{pubRqstTaskCode}
	</select>

	<update id="updatePubRqstTaskStatus">
	  WITH am AS (
	    SELECT pub_aprv_uuid,
	           pub_rqst_task_code,
	           pub_aprv_rqstt_dtm
	    FROM tb_pub_aprv_m
	    WHERE pub_aprv_rqstt_dtm IS NOT NULL
	    <if test="pubRqstTaskCode != null and pubRqstTaskCode != ''">
	      AND pub_rqst_task_code = #{pubRqstTaskCode}
	    </if>
	  ),
	  steps AS (
	    SELECT s.pub_aprv_uuid,
	           s.sort_no,
	           COALESCE(s.lmt_tm, 0) AS lmt_tm,
	           s.aprv_dtm
	    FROM tb_pub_aprv_step_l s
	  ),
	  -- last approved step with sort_no >= 2 (skip step 1)
	  last_approved_ge2 AS (
	    SELECT s.pub_aprv_uuid,
	           MAX(s.sort_no) AS last_sort_no
	    FROM steps s
	    WHERE s.aprv_dtm IS NOT NULL
	      AND s.sort_no >= 2
	    GROUP BY s.pub_aprv_uuid
	  ),
	  last_time AS (
	    SELECT la.pub_aprv_uuid,
	           la.last_sort_no,
	           s.aprv_dtm AS last_aprv_dtm
	    FROM last_approved_ge2 la
	    JOIN tb_pub_aprv_step_l s
	      ON s.pub_aprv_uuid = la.pub_aprv_uuid
	     AND s.sort_no = la.last_sort_no
	  ),
	  -- base_time: last approved (>=2) or request time if none
	  -- next step: (last_sort_no + 1) or step 2 if none approved (>=2)
	  appr_limits AS (
	    SELECT
	      am.pub_rqst_task_code,
	      COALESCE(lt.last_aprv_dtm, am.pub_aprv_rqstt_dtm) AS base_time,
	      ns.lmt_tm::int AS next_lmt_days
	    FROM am
	    LEFT JOIN last_time lt ON lt.pub_aprv_uuid = am.pub_aprv_uuid
	    LEFT JOIN tb_pub_aprv_step_l ns
	      ON ns.pub_aprv_uuid = am.pub_aprv_uuid
	     AND ns.sort_no = CASE
	                        WHEN lt.last_sort_no IS NULL THEN 2
	                        ELSE lt.last_sort_no + 1
	                      END
	  ),
	  expr AS (
	    SELECT m.pub_rqst_task_code, m.dued_dtm
	    FROM tb_pub_rqst_task_m m
	    <where>
	      <if test="pubRqstTaskCode != null and pubRqstTaskCode != ''">
	        m.pub_rqst_task_code = #{pubRqstTaskCode}
	      </if>
	    </where>
	  ),
	  decision AS (
	    SELECT
	      COALESCE(a.pub_rqst_task_code, e.pub_rqst_task_code) AS pub_rqst_task_code,
	      CASE
	        -- due-date delay
	        WHEN e.dued_dtm IS NOT NULL AND <![CDATA[ CURRENT_TIMESTAMP > e.dued_dtm ]]> THEN 'D'
	        -- approval delay (skip step 1): only if next step exists and has positive limit
	        WHEN a.pub_rqst_task_code IS NOT NULL
	             AND a.next_lmt_days IS NOT NULL
	             AND <![CDATA[ a.next_lmt_days > 0 ]]>
	             AND <![CDATA[ CURRENT_TIMESTAMP > (a.base_time + make_interval(days => a.next_lmt_days)) ]]> THEN 'D'
	        ELSE 'I'
	      END AS new_status
	    FROM expr e
	    FULL JOIN appr_limits a ON a.pub_rqst_task_code = e.pub_rqst_task_code
	  )
	  UPDATE tb_pub_rqst_task_m m
	     SET
	       -- save old status when entering D/I and current != D
	       pub_rqst_bfr_stus_code = CASE
	         WHEN d.new_status IN ('D','I')
	              AND m.pub_rqst_stus_code IS DISTINCT FROM 'D'
	           THEN m.pub_rqst_stus_code
	         ELSE m.pub_rqst_bfr_stus_code
	       END,
	       -- revert only for approval delay (Before must be I)
	       pub_rqst_stus_code = CASE
	         WHEN d.new_status = 'I'
	              AND m.pub_rqst_stus_code = 'D'
	              AND m.pub_rqst_bfr_stus_code = 'I'
	           THEN 'I'
	         ELSE d.new_status
	       END
	    FROM decision d
	   WHERE m.pub_rqst_task_code = d.pub_rqst_task_code
	     AND (
	       (m.dued_dtm IS NOT NULL AND <![CDATA[ CURRENT_TIMESTAMP > m.dued_dtm ]]>) OR
	       EXISTS (
	         SELECT 1
	         FROM tb_pub_aprv_m am2
	         WHERE am2.pub_rqst_task_code = m.pub_rqst_task_code
	           AND am2.pub_aprv_rqstt_dtm IS NOT NULL
	       )
	     )
	     AND <![CDATA[ m.pub_rqst_stus_code <> 'P' ]]>
	     AND <![CDATA[
	       COALESCE(m.pub_rqst_stus_code,'') <>
	       CASE
	         WHEN d.new_status = 'I'
	              AND m.pub_rqst_stus_code = 'D'
	              AND m.pub_rqst_bfr_stus_code = 'I'
	           THEN 'I'
	         ELSE d.new_status
	       END
	     ]]>
	     <if test="pubRqstTaskCode != null and pubRqstTaskCode != ''">
	       AND m.pub_rqst_task_code = #{pubRqstTaskCode}
	     </if>
	</update>


	<select id="retrievePubRqstTaskM" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.packages.PubRqstTaskMDto">
	    SELECT
	        a.pub_rqst_task_code        
	        , a.pub_rqst_task_code_name   
	        , a.pub_rqst_task_pubr        
	        , a.pub_rqst_task_pubr_dept_cd
	        , a.pub_rqst_stus_code
	        , a.pub_rqst_bfr_stus_code
	        , a.pub_prcs_type_code        
	        , a.crte_dtm                 
	        , a.vldate_dtm               
	        , a.dued_dtm                 
	        , a.expr_dtm                 
	        , a.rgst_user                
	        , a.rgst_dtm                 
	        , a.upd_user                 
	        , a.upd_dtm                  
			, a.ovw_cntn
	    FROM
	        tb_pub_rqst_task_m a
	    WHERE
	        a.pub_rqst_task_code = #{pubRqstTaskCode}
	</select>
	
	<select id="retrievePubRqstTaskLsts" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.packages.PubRqstTaskLDto">
	    SELECT
	        a.pub_rqst_task_code     
	        , a.chng_data_seq         
	        , a.pub_rqst_detl_stus_code
	        , a.vldate_fnsh_yn        
	        , a.rgst_user             
	        , a.rgst_dtm              
	        , a.upd_user              
	        , a.upd_dtm               
	    FROM
	        tb_pub_rqst_task_l a
	    WHERE
	    	a.pub_rqst_task_code = #{pubRqstTaskCode}
	</select>
	<select id="retrievePubAprvM" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.packages.PubAprvMDto">
	    SELECT
		    a.pub_aprv_uuid      
		    , a.pub_rqst_task_code 
		    , a.pub_aprv_dscr      
		    , a.use_yn             
		    , a.aprv_flow_tmpt_code
		    , a.aprv_flow_tmpt_name
		    , a.pub_aprv_rqstt_dtm
		    , a.rgst_user          
		    , a.rgst_dtm           
		    , a.upd_user           
		    , a.upd_dtm   
	    FROM
	        tb_pub_aprv_m a
	    WHERE
	    	a.pub_rqst_task_code = #{pubRqstTaskCode}
	</select>
	
	<select id="retrievePubRqstTaskCodeOfStep" resultType="String">
	    SELECT
	        a.pub_rqst_task_code        
	    FROM
	        tb_pub_aprv_m a
	    WHERE
	    	a.pub_aprv_uuid = #{pubAprvUuid}

	</select>
	
	<select id="retrievePubPrcsTaskM" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.packages.PubPrcsTaskMDto">
	    SELECT
	        a.pub_rqst_task_code     
	        , a.pub_rqst_task_code_name
	        , a.pub_prcs_stus_code    
	        , a.pub_prcs_rsv_dtm      
	        , a.pub_prcs_start_dtm    
	        , a.pub_prcs_end_dtm      
	        , a.pub_prcs_rslt         
	        , a.pub_prcs_msg          
	        , a.rgst_user             
	        , a.rgst_dtm              
	        , a.upd_user              
	        , a.upd_dtm               
	    FROM
	        tb_pub_prcs_task_m a
	    WHERE
	    	a.pub_rqst_task_code = #{pubRqstTaskCode}
	</select>
	
	<insert id="savePubRqstTaskM">
	  INSERT INTO tb_pub_rqst_task_m (
	    pub_rqst_task_code
	    , pub_rqst_task_code_name
	    , pub_rqst_task_pubr
	    , pub_rqst_task_pubr_dept_cd
	    , pub_rqst_stus_code
	    , pub_rqst_bfr_stus_code
	    , pub_prcs_type_code
	    , crte_dtm
	    , vldate_dtm
	    , dued_dtm
	    , expr_dtm
	    , ovw_cntn
	    , rgst_user
	    , rgst_dtm
	    , upd_user
	    , upd_dtm
	  )
	  VALUES (
	    #{pubRqstTaskCode}
	    , #{pubRqstTaskCodeName}
	    , #{pubRqstTaskPubr}
	    , #{pubRqstTaskPubrDeptCd}
	    , #{pubRqstStusCode}
	    , #{pubRqstBfrStusCode}
	    , #{pubPrcsTypeCode}
	    , #{crteDtm}::TIMESTAMP
	    , #{vldateDtm}::TIMESTAMP
	    , #{duedDtm}::TIMESTAMP
	    , #{exprDtm}::TIMESTAMP
	    , #{ovwCntn}
	    , #{rgstUser}
	    , CURRENT_TIMESTAMP
	    , #{updUser}
	    , CURRENT_TIMESTAMP
	  )
	  ON CONFLICT (pub_rqst_task_code)
	  DO UPDATE SET
	    pub_rqst_task_code_name = EXCLUDED.pub_rqst_task_code_name
	    , pub_rqst_task_pubr = EXCLUDED.pub_rqst_task_pubr
	    , pub_rqst_task_pubr_dept_cd = EXCLUDED.pub_rqst_task_pubr_dept_cd
	    , pub_rqst_stus_code = EXCLUDED.pub_rqst_stus_code
	    , pub_rqst_bfr_stus_code = EXCLUDED.pub_rqst_bfr_stus_code
	    , pub_prcs_type_code = EXCLUDED.pub_prcs_type_code
	    , crte_dtm = EXCLUDED.crte_dtm
	    , vldate_dtm = EXCLUDED.vldate_dtm
	    , dued_dtm = EXCLUDED.dued_dtm
	    , expr_dtm = EXCLUDED.expr_dtm
	    , ovw_cntn = EXCLUDED.ovw_cntn
	    , upd_user = EXCLUDED.upd_user
	    , upd_dtm = CURRENT_TIMESTAMP
	</insert>

	<insert id="savePubAprvM">
	  INSERT INTO tb_pub_aprv_m (
	    pub_aprv_uuid
	    , pub_rqst_task_code
	    , pub_aprv_dscr
	    , use_yn
	    , aprv_flow_tmpt_code
	    , aprv_flow_tmpt_name
	    , pub_aprv_rqstt_dtm
	    , rgst_user
	    , rgst_dtm
	    , upd_user
	    , upd_dtm
	  )
	  VALUES (
	    #{pubAprvUuid}
	    , #{pubRqstTaskCode}
	    , #{pubAprvDscr}
	    , #{useYn}
	    , #{aprvFlowTmptCode}
	    , #{aprvFlowTmptName}
	    , #{pubAprvRqsttDtm}::TIMESTAMP
	    , #{rgstUser}
	    , CURRENT_TIMESTAMP
	    , #{updUser}
	    , CURRENT_TIMESTAMP
	  )
	  ON CONFLICT (pub_aprv_uuid)
	  DO UPDATE SET
	    pub_rqst_task_code = EXCLUDED.pub_rqst_task_code
	    , pub_aprv_dscr = EXCLUDED.pub_aprv_dscr
	    , use_yn = EXCLUDED.use_yn
	    , aprv_flow_tmpt_code = EXCLUDED.aprv_flow_tmpt_code
	    , aprv_flow_tmpt_name = EXCLUDED.aprv_flow_tmpt_name
	    , pub_aprv_rqstt_dtm = EXCLUDED.pub_aprv_rqstt_dtm
	    , upd_user = EXCLUDED.upd_user
	    , upd_dtm = CURRENT_TIMESTAMP
	</insert>
	
	<select id="retrievePubAprvSubStepL" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.packages.PubAprvSubStepLDto">
	  SELECT
	    a.pub_aprv_uuid    
	    , a.sort_no          
	    , a.sub_sort_no      
	    , a.aprv_user        
	    , a.aprv_user_dept_cd
	    , a.aprv_stus_code   
	    , a.aprv_stus_dscr   
	    , a.aprv_dtm         
	    , a.use_yn           
	    , a.rgst_user        
	    , a.rgst_dtm         
	    , a.upd_user         
	    , a.upd_dtm            
	  FROM
	    tb_pub_aprv_sub_step_l a
	  <where>
	    <if test="pubAprvUuid != null">
	      AND a.pub_aprv_uuid = #{pubAprvUuid}
	    </if>
	    <if test="sortNo != null">
	      AND a.sort_no = #{sortNo}
	    </if>
	    <if test="subSortNo != null">
	      AND a.sub_sort_no = #{subSortNo}
	    </if>
	  </where>
	</select>
	
	<update id="updateStusPubAprvStepL">
	  UPDATE tb_pub_aprv_step_l
	  <set>
	    aprv_stus_code     = #{aprvStusCode}
	    , aprv_stus_dscr     = #{aprvStusDscr}
	    , aprv_dtm           = #{aprvDtm}::TIMESTAMP
	    , upd_user           = #{updUser}
	    , upd_dtm            = CURRENT_TIMESTAMP
	  </set>
	  WHERE
	    pub_aprv_uuid = #{pubAprvUuid}
	    AND sort_no = #{sortNo}
	</update>

	<insert id="insertPubAprvStepL">
	  INSERT INTO tb_pub_aprv_step_l (
	    pub_aprv_uuid
	    , sort_no
	    , pub_aprv_step_code
	    , aprv_stus_code
	    , aprv_stus_dscr
	    , aprv_dtm
	    , lmt_tm
	    , use_yn
	    , rgst_user
	    , rgst_dtm
	    , upd_user
	    , upd_dtm
	  )
	  VALUES (
	    #{pubAprvUuid}
	    , #{sortNo}
	    , #{pubAprvStepCode}
	    , #{aprvStusCode}
	    , #{aprvStusDscr}
	    , #{aprvDtm}::TIMESTAMP
	    , #{lmtTm}
	    , #{useYn}
	    , #{rgstUser}
	    , CURRENT_TIMESTAMP
	    , #{updUser}
	    , CURRENT_TIMESTAMP
	  )
	</insert>
	
	<insert id="savePubAprvSubStepL">
	  INSERT INTO tb_pub_aprv_sub_step_l (
	    pub_aprv_uuid
	    , sort_no
	    , sub_sort_no
	    , aprv_user
	    , aprv_user_dept_cd
	    , aprv_stus_code
	    , aprv_stus_dscr
	    , aprv_dtm
	    , use_yn
	    , rgst_user
	    , rgst_dtm
	    , upd_user
	    , upd_dtm
	  )
	  VALUES (
	    #{pubAprvUuid}
	    , #{sortNo}
	    , #{subSortNo}
	    , #{aprvUser}
	    , #{aprvUserDeptCd}
	    , #{aprvStusCode}
	    , #{aprvStusDscr}
	    , #{aprvDtm}::TIMESTAMP
	    , #{useYn}
	    , #{rgstUser}
	    , CURRENT_TIMESTAMP
	    , #{updUser}
	    , CURRENT_TIMESTAMP
	  )
	  ON CONFLICT (pub_aprv_uuid, sort_no, sub_sort_no)
	  DO UPDATE SET
	    aprv_user = EXCLUDED.aprv_user
	    , aprv_user_dept_cd = EXCLUDED.aprv_user_dept_cd
	    , aprv_stus_code = EXCLUDED.aprv_stus_code
	    , aprv_stus_dscr = EXCLUDED.aprv_stus_dscr
	    , aprv_dtm = EXCLUDED.aprv_dtm
	    , use_yn = EXCLUDED.use_yn
	    , upd_user = EXCLUDED.upd_user
	    , upd_dtm = CURRENT_TIMESTAMP
	</insert>


    <insert id="insertChngDataListI" parameterType="com.lgcns.svcp.prod.entity.ChngDataListL" useGeneratedKeys="true" keyProperty="chngDataSeq">
        INSERT INTO tb_chng_data_list_l (
            chng_data_code,
            chng_data_obj_uuid,
            chng_data_type_code,
            chng_data_stus_code,
            chng_data_rqst_user,
            chng_data_rqst_dept_name,
            call_api_url,
            call_api_method,
            call_api_query,
            call_api_body,
            rgst_user,
            rgst_dtm,
            upd_user,
            upd_dtm
        )
        VALUES (
            #{chngDataCode},
            #{chngDataObjUuid},
            #{chngDataTypeCode},
            #{chngDataStusCode},
            #{chngDataRqstUser},
            #{chngDataRqstDeptName},
            #{callApiUrl},
            #{callApiMethod},
            #{callApiQuery},
            #{callApiBody},
            #{chngDataRqstUser},
            CURRENT_TIMESTAMP,
            #{chngDataRqstUser},
            CURRENT_TIMESTAMP
        )
    </insert>

	<update id="updateChngDataStusCode">
	  UPDATE tb_chng_data_list_l
	  <set>
		chng_data_stus_code   = #{chngDataStusCode}
	    , upd_user            = #{updUser}
	    , upd_dtm             = CURRENT_TIMESTAMP
	  </set>
	  WHERE
	    chng_data_seq = #{chngDataSeq}
	</update>
	
	<update id="updatePubRqstStusCode">
	  UPDATE tb_pub_rqst_task_m
	  <set>
	    pub_rqst_stus_code    = #{pubRqstStusCode}
   	    , upd_user            = #{updUser}
	    , upd_dtm             = CURRENT_TIMESTAMP
	  </set>
	  WHERE
	    pub_rqst_task_code = #{pubRqstTaskCode}
	</update>
	<update id="updatePubRqstTypeCode">
	  UPDATE tb_pub_rqst_task_m
	  <set>
	    pub_prcs_type_code    = #{pubPrcsTypeCode}
   	    , upd_user            = #{updUser}
	    , upd_dtm             = CURRENT_TIMESTAMP
	  </set>
	  WHERE
	    pub_rqst_task_code = #{pubRqstTaskCode}
	</update>
	
	<insert id="savePubRqstTaskL">
      INSERT INTO tb_pub_rqst_task_l (
	    pub_rqst_task_code
	    , chng_data_seq
	    , pub_rqst_detl_stus_code
	    , vldate_fnsh_yn
	    , rgst_user
	    , rgst_dtm
	    , upd_user
	    , upd_dtm
	  )
	  VALUES (
	    #{pubRqstTaskCode}
	    , #{chngDataSeq}
	    , #{pubRqstDetlStusCode}
	    , #{vldateFnshYn}
	    , #{rgstUser}
	    , CURRENT_TIMESTAMP
	    , #{updUser}
	    , CURRENT_TIMESTAMP
	  )
	  ON CONFLICT (pub_rqst_task_code, chng_data_seq)
	  DO UPDATE SET
	    pub_rqst_detl_stus_code = EXCLUDED.pub_rqst_detl_stus_code
	    , vldate_fnsh_yn = EXCLUDED.vldate_fnsh_yn
	    , upd_user = EXCLUDED.upd_user
	    , upd_dtm = CURRENT_TIMESTAMP
	</insert>
	
	<insert id="savePubPrcsTaskM">
	  INSERT INTO tb_pub_prcs_task_m (
	    pub_rqst_task_code
	    , pub_rqst_task_code_name
	    , pub_prcs_stus_code
	    , pub_prcs_rsv_dtm
	    , pub_prcs_start_dtm
	    , pub_prcs_end_dtm
	    , pub_prcs_rslt
	    , pub_prcs_msg
	    , rgst_user
	    , rgst_dtm
	    , upd_user
	    , upd_dtm
	  )
	  VALUES (
	    #{pubRqstTaskCode}
	    , #{pubRqstTaskCodeName}
	    , #{pubPrcsStusCode}
	    , #{pubPrcsRsvDtm}::TIMESTAMP
	    , #{pubPrcsStartDtm}::TIMESTAMP
	    , #{pubPrcsEndDtm}::TIMESTAMP
	    , #{pubPrcsRslt}
	    , #{pubPrcsMsg}
	    , #{rgstUser}
	    , CURRENT_TIMESTAMP
	    , #{updUser}
	    , CURRENT_TIMESTAMP
	  )
	  ON CONFLICT (pub_rqst_task_code)
	  DO UPDATE SET
	    pub_rqst_task_code_name = EXCLUDED.pub_rqst_task_code_name
	    , pub_prcs_stus_code = EXCLUDED.pub_prcs_stus_code
	    , pub_prcs_rsv_dtm = EXCLUDED.pub_prcs_rsv_dtm
	    , pub_prcs_start_dtm = EXCLUDED.pub_prcs_start_dtm
	    , pub_prcs_end_dtm = EXCLUDED.pub_prcs_end_dtm
	    , pub_prcs_rslt = EXCLUDED.pub_prcs_rslt
	    , pub_prcs_msg = EXCLUDED.pub_prcs_msg
	    , upd_user = EXCLUDED.upd_user
	    , upd_dtm = CURRENT_TIMESTAMP
	</insert>

	<select id="searchAprvFlowTmptM" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.aprv.AprvFlowTmptMDto">
	  	SELECT
		    a.aprv_flow_tmpt_code     
		    , a.aprv_flow_tmpt_name     
		    , a.aprv_flow_tmpt_dscr     
		    , a.aprv_flow_tmpt_type_code
		    , a.use_yn                  
		    , a.rgst_user               
		    , a.rgst_dtm                
		    , a.upd_user                
		    , a.upd_dtm 
		FROM
		  tb_aprv_flow_tmpt_m a
		WHERE
		  a.use_yn = 'Y'
		  <if test="aprvFlowTmptCode != null">
		    AND a.aprv_flow_tmpt_code ILIKE CONCAT('%', #{aprvFlowTmptCode}, '%')
		  </if>
		  <if test="aprvFlowTmptName != null">
		    AND a.aprv_flow_tmpt_name ILIKE CONCAT('%', #{aprvFlowTmptName}, '%')
		  </if>
		  <if test="aprvUser != null">
		    AND EXISTS (
		      SELECT 1
		      FROM tb_aprv_flow_tmpt_step_l b
		      JOIN tb_aprv_flow_tmpt_sub_step_l c ON b.aprv_flow_tmpt_code = c.aprv_flow_tmpt_code
		      WHERE b.aprv_flow_tmpt_code = a.aprv_flow_tmpt_code
		        AND b.use_yn = 'Y'
		        AND c.use_yn = 'Y'
		        AND c.aprv_user ILIKE CONCAT('%', #{aprvUser}, '%')
		    )
		  </if>
	</select>
	
	<select id="retrieveAprvFlowTmptM" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.aprv.AprvFlowTmptMDto">
	  SELECT
	    a.aprv_flow_tmpt_code
	    , a.aprv_flow_tmpt_dscr
	    , a.use_yn
	    , a.rgst_user
	    , a.rgst_dtm
	    , a.upd_user
	    , a.upd_dtm
	  FROM
	    tb_aprv_flow_tmpt_m a
	  <where>
	  	a.use_yn = 'Y'
	    <if test="aprvFlowTmptCode != null">
	      AND a.aprv_flow_tmpt_code = #{aprvFlowTmptCode}
	    </if>
	  </where>
	</select>
	
	<select id="searchAprvFlowTmptStepL" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.aprv.AprvFlowTmptStepLDto">
	  SELECT
	    a.aprv_flow_tmpt_code
	    , a.sort_no            
	    , a.aprv_step_code     
	    , a.lmt_tm             
	    , a.use_yn             
	    , a.rgst_user          
	    , a.rgst_dtm           
	    , a.upd_user           
	    , a.upd_dtm            
	  FROM
	    tb_aprv_flow_tmpt_step_l a
	  <where>
	  	a.use_yn = 'Y'
	    <if test="aprvFlowTmptCode != null">
	      AND a.aprv_flow_tmpt_code = #{aprvFlowTmptCode}
	    </if>
    	<if test="aprvFlowTmptCodes != null and aprvFlowTmptCodes.size() > 0">
	      AND a.aprv_flow_tmpt_code IN
	      <foreach item="code" collection="aprvFlowTmptCodes" open="(" separator="," close=")">
	        #{code}
	      </foreach>
	    </if>
	  </where>
	  ORDER BY
	    a.sort_no
	</select>
	
	<select id="searchAprvFlowTmptSubStepL" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.aprv.AprvFlowTmptSubStepLDto">
	  SELECT
	    a.aprv_flow_tmpt_code
	    , a.sort_no            
	    , a.sub_sort_no        
	    , a.aprv_user          
	    , a.aprv_user_dept_cd  
	    , a.use_yn             
	    , a.rgst_user          
	    , a.rgst_dtm           
	    , a.upd_user           
	    , a.upd_dtm            
	  FROM
	    tb_aprv_flow_tmpt_sub_step_l a
	  <where>
	  	a.use_yn = 'Y'
	    <if test="aprvFlowTmptCode != null">
	      AND a.aprv_flow_tmpt_code = #{aprvFlowTmptCode}
	    </if>
   	    <if test="aprvFlowTmptCodes != null and aprvFlowTmptCodes.size() > 0">
	      AND a.aprv_flow_tmpt_code IN
	      <foreach item="code" collection="aprvFlowTmptCodes" open="(" separator="," close=")">
	        #{code}
	      </foreach>
	    </if>
	  </where>
  	  ORDER BY
	    a.sort_no
	    , a.sub_sort_no
	</select>
	
	<select id="isAllPubAprvStepApproved" resultType="boolean">
	    SELECT
	    	bool_and(aprv_stus_code = 'APR') 
	    FROM
	    	TB_PUB_APRV_STEP_L
	    WHERE
	    	pub_aprv_uuid = #{pubAprvUuid}
	</select>
	
	<select id="isAutoPublish" resultType="boolean">
	    SELECT
	   	 	pub_prcs_type_code = 'A'
	    FROM
	    	tb_pub_rqst_task_m
	    WHERE
	    	pub_rqst_task_code = #{pubRqstTaskCode}
	</select>

	<select id="retrievePubAprvStepL" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.packages.PubAprvStepLDto">
	  SELECT
	    a.pub_aprv_uuid     
	    , a.sort_no           
	    , a.pub_aprv_step_code
	    , a.aprv_stus_code    
	    , a.aprv_stus_dscr    
	    , a.aprv_dtm          
	    , a.lmt_tm            
	    , a.use_yn            
	    , a.rgst_user         
	    , a.rgst_dtm          
	    , a.upd_user          
	    , a.upd_dtm           
	  FROM
	    tb_pub_aprv_step_l a
	  <where>
	    <if test="pubAprvUuid != null">
	      AND a.pub_aprv_uuid = #{pubAprvUuid}
	    </if>
	  </where>
	</select>
	
	<select id="retrievePubReqTaskLOfPackage" resultType="com.lgcns.svcp.prod.ui.prod.dto.publish.item.ChngDataListLDto">
	  SELECT
		b.chng_data_seq           
	    , b.chng_data_code          
	    , b.chng_data_code_name     
	    , b.chng_data_obj_uuid      
	    , b.chng_data_item_code     
	    , b.chng_data_type_code     
	    , b.chng_data_stus_code     
	    , b.chng_data_rqst_user     
	    , b.chng_data_rqst_dept_name
	    , b.call_api_url            
	    , b.call_api_method         
	    , b.call_api_query          
	    , b.call_api_body           
	    , b.rgst_user               
	    , b.rgst_dtm                
	    , b.upd_user                
	    , b.upd_dtm           
	  FROM
	  	tb_pub_rqst_task_l a
	  JOIN
	  	tb_chng_data_list_l b ON a.chng_data_seq = b.chng_data_seq
	  <where>
	    <if test="pubRqstTaskCode != null">
	      a.pub_rqst_task_code = #{pubRqstTaskCode}
	    </if>
	  </where>
	</select>
	
	<delete id="deleteOldPubRqstTaskL" parameterType="java.util.List">
	  DELETE
	  	FROM tb_pub_rqst_task_l
	  WHERE
	  	chng_data_seq IN
		  <foreach item="seq" collection="list" open="(" separator="," close=")">
		    #{seq}
		  </foreach>
	</delete>
	
	<delete id="deleteOldPubAprvStepL">
	  DELETE FROM
	    tb_pub_aprv_step_l
	  WHERE
	  	sort_no > 1
	    AND pub_aprv_uuid = #{pubAprvUuid}
	</delete>
	
	<delete id="deleteOldPubAprvSubStepL">
	  DELETE FROM
	    tb_pub_aprv_sub_step_l
	  WHERE
	    pub_aprv_uuid = #{pubAprvUuid}
	</delete>	

</mapper>
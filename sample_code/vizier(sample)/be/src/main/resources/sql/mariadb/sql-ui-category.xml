<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2023. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
  ~ Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.
  ~ Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.
  ~ Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.
  ~ Vestibulum commodo. Ut rhoncus gravida arcu.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Ui-category">
    
    <select id="getCountCatgM" resultType="int">
		<![CDATA[
        SELECT
			count(1)
		FROM
			tb_ctgr_node_m
		WHERE
			hpst_ctgr_node_uuid = #{ctgrNodeUuid}
		]]>
    </select>
    
    <select id="retrieveProdMByCatgMUuid" resultType="com.lgcns.svcp.prod.ui.prod.dto.offer.OfferOfLeafNodeDto">
		SELECT
		  c.ctgr_node_uuid,
		  b.obj_uuid as prod_uuid,
		  b.obj_code as prod_cd,
		  b.obj_name as prod_nm,
		  a.vald_strt_dtm,
		  a.vald_end_dtm
		FROM 
		  tb_ctgr_item_rel_d a
		JOIN
		  	tb_item_mpng_d b ON a.obj_uuid = b.obj_uuid
		JOIN 
			tb_ctgr_node_m c ON a.ctgr_node_uuid = c.ctgr_node_uuid
		WHERE
			a.ctgr_node_uuid = #{ctgrNodeUuid}
			AND c.ctgr_tab_uuid = #{ctgrTabUuid}
			AND (a.vald_end_dtm IS NULL OR TIMESTAMP(a.vald_end_dtm) >= NOW())
    </select>
    
    
    <select id="retrieveCategoryTreeWithOfferCounts" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.CategoryTreeDto">
			WITH RECURSIVE CategoryTree AS (
			    SELECT
	                a.ctgr_node_uuid
			        , a.ctgr_tab_uuid
			        , a.ctgr_node_name
			        , a.hpst_ctgr_node_uuid
			        , a.tcls_ctgr_yn
			        , a.chg_dept_name
			        , a.chg_user
			        , a.ctgr_ovw_cntn
			        , a.use_yn
			        , a.rgst_user
			        , a.rgst_dtm
			        , a.upd_user
			        , a.upd_dtm
			        , 1 AS level
			    FROM
			    	tb_ctgr_node_m a
			    WHERE
			        tcls_ctgr_yn = 'Y'
			        AND use_yn ='Y'
			        AND ctgr_tab_uuid = #{ctgrTabUuid}
			    UNION ALL
			    SELECT
			        b.ctgr_node_uuid
			        , b.ctgr_tab_uuid
			        , b.ctgr_node_name
			        , b.hpst_ctgr_node_uuid
			        , b.tcls_ctgr_yn
			        , b.chg_dept_name
			        , b.chg_user
			        , b.ctgr_ovw_cntn
			        , b.use_yn
			        , b.rgst_user
			        , b.rgst_dtm
			        , b.upd_user
			        , b.upd_dtm
			        , ct.level + 1 AS level
			    FROM
			        tb_ctgr_node_m b
			    INNER JOIN
			        CategoryTree ct ON b.hpst_ctgr_node_uuid = ct.ctgr_node_uuid
			    WHERE
			        b.use_yn ='Y'
				),
				LeafNodeProducts AS (
				    SELECT
				        a.ctgr_node_uuid
				        , COUNT(*) AS offer_count
				    FROM
				        tb_ctgr_item_rel_d a
					JOIN
					  	tb_ctgr_node_m b ON a.ctgr_node_uuid = b.ctgr_node_uuid
					WHERE
						b.ctgr_tab_uuid = #{ctgrTabUuid}
						AND (a.vald_end_dtm IS NULL OR TIMESTAMP(a.vald_end_dtm) >= NOW())
				    GROUP BY
				        a.ctgr_node_uuid
				),
				CategoryProductCounts AS (
				    SELECT
		                ct.ctgr_node_uuid
				        , ct.ctgr_tab_uuid
				        , ct.ctgr_node_name
				        , ct.hpst_ctgr_node_uuid
				        , ct.tcls_ctgr_yn
				        , ct.chg_dept_name
				        , ct.chg_user
				        , ct.ctgr_ovw_cntn
				        , ct.use_yn
				        , ct.rgst_user
				        , ct.rgst_dtm
				        , ct.upd_user
				        , ct.upd_dtm
				        , ct.level
				        , COALESCE(lnp.offer_count, 0) AS direct_offer_count
				    FROM
				        CategoryTree ct
				    LEFT JOIN
				        LeafNodeProducts lnp ON ct.ctgr_node_uuid = lnp.ctgr_node_uuid
				),
				AggregatedProductCounts AS (
				    SELECT
	                	cpc.ctgr_node_uuid
				        , cpc.ctgr_tab_uuid
				        , cpc.ctgr_node_name
				        , cpc.hpst_ctgr_node_uuid
				        , cpc.tcls_ctgr_yn
				        , cpc.chg_dept_name
				        , cpc.chg_user
				        , cpc.ctgr_ovw_cntn
				        , cpc.use_yn
				        , cpc.rgst_user
				        , cpc.rgst_dtm
				        , cpc.upd_user
				        , cpc.upd_dtm
				        , cpc.level
				        , CASE WHEN cpc.direct_offer_count > 0 THEN 'Y' ELSE 'N' END AS is_leaf_category_node
				        , cpc.direct_offer_count
				        , cpc.direct_offer_count AS total_offer_count
				    FROM
				        CategoryProductCounts cpc
				    UNION ALL
				    SELECT
				        cpc.ctgr_node_uuid
				        , cpc.ctgr_tab_uuid
				        , cpc.ctgr_node_name
				        , cpc.hpst_ctgr_node_uuid
				        , cpc.tcls_ctgr_yn
				        , cpc.chg_dept_name
				        , cpc.chg_user
				        , cpc.ctgr_ovw_cntn
				        , cpc.use_yn
				        , cpc.rgst_user
				        , cpc.rgst_dtm
				        , cpc.upd_user
				        , cpc.upd_dtm
				        , cpc.level
				        , CASE WHEN cpc.direct_offer_count > 0 THEN 'Y' ELSE 'N' END AS is_leaf_category_node
				        , cpc.direct_offer_count
				        , apc.total_offer_count + cpc.direct_offer_count AS total_offer_count
				    FROM
				        CategoryProductCounts cpc
				    INNER JOIN
				        AggregatedProductCounts apc ON cpc.ctgr_node_uuid = apc.hpst_ctgr_node_uuid
			)
			SELECT
	            c.ctgr_node_uuid
		        , c.ctgr_tab_uuid
		        , c.ctgr_node_name
		        , c.hpst_ctgr_node_uuid
		        , c.tcls_ctgr_yn
		        , c.chg_dept_name
		        , c.chg_user
		        , c.ctgr_ovw_cntn
		        , c.use_yn
			    -- , CASE WHEN c.direct_offer_count > 0 THEN 'Y' ELSE 'N' END AS is_leaf_category_node
			    , CASE 
			        WHEN c.ctgr_node_uuid NOT IN (SELECT d.hpst_ctgr_node_uuid FROM tb_ctgr_node_m d WHERE d.hpst_ctgr_node_uuid = c.ctgr_node_uuid) 
			        THEN 'Y' ELSE 'N'
			    END AS is_leaf_category_node
			    , COALESCE(SUM(apc.total_offer_count), 0) AS total_offer_count
			    , c.level
			    , c.rgst_user
			    , c.rgst_dtm
			    , c.upd_user
			    , c.upd_dtm
			FROM
			    CategoryProductCounts c
			LEFT JOIN
			    AggregatedProductCounts apc ON c.ctgr_node_uuid = apc.ctgr_node_uuid
			GROUP BY
			    c.ctgr_node_uuid, c.hpst_ctgr_node_uuid, c.ctgr_node_name, c.rgst_user, c.rgst_dtm, c.upd_user, c.upd_dtm, c.level
			ORDER BY
			    total_offer_count DESC
			    , c.rgst_dtm
    </select>
    
    <select id="retrieveCategoryPathWithOffer" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.CategoryPathDto">
        	WITH RECURSIVE CategoryPath AS (
			    SELECT
			        ctgr_node_uuid as catg_uuid,
			        hpst_ctgr_node_uuid as hpos_catg_uuid,
			        ctgr_node_name as catg_nm,
			        ctgr_node_name AS level1,
			        cast(null as varchar(30)) AS level2,
			        cast(null as varchar(30)) AS level3,
			        cast(null as varchar(30)) AS level4,
			        cast(null as varchar(30)) AS level5,
			        cast(null as varchar(30)) AS level6,
			        1 AS level,
			        rgst_user,
			        rgst_dtm,
			        upd_user,
			        upd_dtm
			    FROM
			        tb_ctgr_node_m
			    WHERE
			        tcls_ctgr_yn ='Y'
			        AND use_yn ='Y'
 			        AND ctgr_tab_uuid = #{ctgrTabUuid}
			    UNION
			    SELECT
			        c.ctgr_node_uuid as catg_uuid,
			        c.hpst_ctgr_node_uuid as hpos_catg_uuid,
			        c.ctgr_node_name as catg_nm,
			        cp.level1,
			        CASE WHEN cp.level =  1 THEN c.ctgr_node_name ELSE cp.level2 END AS level2,
			        CASE WHEN cp.level = 2 THEN c.ctgr_node_name ELSE cp.level3 END AS level3,
			        CASE WHEN cp.level = 3 THEN c.ctgr_node_name ELSE cp.level4 END AS level4,
			        CASE WHEN cp.level = 4 THEN c.ctgr_node_name ELSE cp.level5 END AS level5,
			        CASE WHEN cp.level = 5 THEN c.ctgr_node_name ELSE cp.level6 END AS level6,
			        cp.level + 1 AS level,
			        c.rgst_user,
			        c.rgst_dtm,
			        c.upd_user,
			        c.upd_dtm
			    FROM
			        tb_ctgr_node_m c
			    INNER JOIN
			        CategoryPath cp ON c.hpst_ctgr_node_uuid = cp.catg_uuid
			    WHERE
			        c.use_yn ='Y'  
			)
			SELECT
			    cp.level1,
			    cp.level2,
			    cp.level3,
			    cp.level4,
			    cp.level5,
			    cp.level6,
			    c.obj_code as offer_cd,
			    c.obj_name as offer_nm, 
			    cp.level,
			    cp.rgst_user,
			    cp.rgst_dtm,
			    cp.upd_user,
			    cp.upd_dtm
			FROM
			    CategoryPath cp
			LEFT JOIN
				tb_ctgr_node_m a ON cp.catg_uuid = a.hpst_ctgr_node_uuid
			LEFT JOIN
				tb_ctgr_item_rel_d b ON cp.catg_uuid = b.ctgr_node_uuid
			LEFT JOIN
				tb_item_mpng_d c ON c.obj_uuid = b.obj_uuid
			<where>
				(b.vald_end_dtm IS NULL OR TIMESTAMP(b.vald_end_dtm) >= NOW())
			    AND a.hpst_ctgr_node_uuid IS NULL
				<if test="ctgrNodeName != null and ctgrNodeName != ''">
					and 
					(
						UPPER(cp.level1) LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{ctgrNodeName})),'%')]]>
						or UPPER(cp.level2) LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{ctgrNodeName})),'%')]]>
						or UPPER(cp.level3) LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{ctgrNodeName})),'%')]]>
						or UPPER(cp.level4) LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{ctgrNodeName})),'%')]]>
						or UPPER(cp.level5) LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{ctgrNodeName})),'%')]]>
					)
				</if>
			 	<if test="offerCd != null and offerCd != ''">
					and c.obj_code LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{offerCd})),'%')]]>
				</if>
				<if test="offerNm != null and offerNm != ''">
					and UPPER(c.obj_name) LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{offerNm})),'%')]]>
				</if>
			</where>
    </select>
    
    <select id="retrieveCategoryDescription" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.CategoryDescriptionDto">
        <![CDATA[
			SELECT
            ctgr_tab_uuid as item_type_id
            ,MAX(CASE WHEN level_no = 1 THEN level_dscr_cntn ELSE NULL END) AS level1
            ,MAX(CASE WHEN level_no = 2 THEN level_dscr_cntn ELSE NULL END) AS level2
            ,MAX(CASE WHEN level_no = 3 THEN level_dscr_cntn ELSE NULL END) AS level3
            ,MAX(CASE WHEN level_no = 4 THEN level_dscr_cntn ELSE NULL END) AS level4
            ,MAX(CASE WHEN level_no = 5 THEN level_dscr_cntn ELSE NULL END) AS level5
            ,MAX(CASE WHEN level_no = 6 THEN level_dscr_cntn ELSE NULL END) AS level6
        FROM
            tb_ctgr_level_d 
        WHERE
            ctgr_tab_uuid = #{ctgrTabUuid}
        GROUP BY
            ctgr_tab_uuid
		]]>
    </select>
    
    <select id="retrieveOfferMWithCategoryList" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.ProdMWithCatgUuid">
		SELECT
			a.ctgr_node_uuid
			, c.obj_uuid as prod_uuid
			, c.obj_code as prod_cd
			, c.obj_name as prod_nm
			, b.vald_strt_dtm
			, b.vald_end_dtm
			, b.rgst_user
			, b.rgst_dtm
			, b.upd_user
			, b.upd_dtm
		FROM
			tb_ctgr_node_m a
		JOIN
			tb_ctgr_item_rel_d b on a.ctgr_node_uuid = b.ctgr_node_uuid 
		JOIN
			tb_item_mpng_d c ON b.obj_uuid = c.obj_uuid 
		<where>
			a.ctgr_tab_uuid  = #{ctgrTabUuid}
			<if test="offerNm != null">
			    AND UPPER(c.obj_name) LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{offerNm})),'%')]]>
			</if>
			<if test="offerCd != null">
			    AND c.obj_code LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{offerCd})),'%')]]>
			</if>
		</where>
		ORDER BY
			c.obj_code
    </select>
    
    <select id="retrieveDeviceWithCategoryList" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.DeviceWithCatgUuid">
        
		select
			b.catg_uuid
			, a.prod_uuid
			, a.eqip_trm_cd
			, a.eqip_trm_nm
			, a.eqip_trm_kd_cd
			, a.eqip_trm_all_nm
			, a.manf_cd
			, a.dvic_no
			, a.eqip_trm_knd_cd
			, a.dvic_isu_yymm
			, a.flt_excg_psbl_yn
			, a.rent_psbl_yn
			, a.dvic_enpr_divs_cd
			, a.eqip_trm_divs_cd
			, a.biz_dtbn_lkge_yn
			, a.body_acso_divs_cd
			, a.eqip_trm_natv_cd
			, a.lnwl_clss_cd
			, a.wrls_trm_kd_cd
			, a.fscp_trm_yn
			, a.trm_cout_scdl_dtm
			, a.eqip_trm_vald_strt_dtm
			, a.eqip_trm_vald_end_dtm
			, a.rgst_usr
			, a.rgst_dtm
			, a.upd_usr
			, a.upd_dtm
		from
			tb_eqip_trm_m a
		join tb_catg_prod_item_d b on
			a.prod_uuid = b.prod_item_uuid
		where 1 = 1
		<if test="offerNm != null">
		    and UPPER(a.eqip_trm_nm) LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{offerNm})),'%')]]>
		</if>
		<if test="offerCd != null">
		    and a.eqip_trm_cd LIKE <![CDATA[ CONCAT('%', TRIM(UPPER(#{offerCd})),'%')]]>
		</if>
		
    </select>
    
    <insert id="insertCategoryRel">
	    INSERT INTO tb_ctgr_item_rel_d (
	        ctgr_node_uuid
	        , obj_uuid
	        , vald_strt_dtm
	        , vald_end_dtm
	        , rgst_user
	        , rgst_dtm
	        , upd_user
	        , upd_dtm
	    )
		VALUES (
	    	#{ctgrNodeUuid}
	    	, #{objUuid}
	        , CAST(CURDATE() AS DATETIME)
	        , (DATE_FORMAT(DATE(#{valdEndDtm}) , '%Y-%m-%d 23:59:59'))
			, #{rgstUser}
			, #{rgstDtm}
			, #{updUser}
			, #{updDtm}
		)
	</insert>
	
	<update id="updateCategoryRelByOfferUuid">
	    UPDATE tb_ctgr_item_rel_d
	    <set>
	    	ctgr_node_uuid = #{ctgrNodeUuid}
	        , vald_end_dtm = (DATE_FORMAT(DATE(#{valdEndDtm}) , '%Y-%m-%d 23:59:59'))
	        , upd_user = #{updUser}
	        , upd_dtm = #{updDtm}
	    </set>
	    WHERE
	        obj_uuid = #{objUuid};
	</update>
    
    <select id="retrieveOffersOfCatgegory" resultType="com.lgcns.svcp.prod.ui.prod.dto.ItemMappingDto">
    	WITH RECURSIVE SubItems AS (
	        SELECT
	        	c.obj_uuid
				, c.obj_code
				, c.obj_name
				, c.item_code
				, c.valid_start_dtm
				, c.valid_end_dtm
				, a.ctgr_node_uuid 
	        FROM
	        	tb_ctgr_node_m a
	        LEFT JOIN
	        	tb_ctgr_item_rel_d b ON a.ctgr_node_uuid = b.ctgr_node_uuid
	        LEFT JOIN
	        	tb_item_mpng_d c ON b.obj_uuid = c.obj_uuid
	        WHERE
	        	a.ctgr_node_uuid = #{ctgrNodeUuid}
	        
	        UNION all
	        
			SELECT
 	        	c.obj_uuid
				, c.obj_code
				, c.obj_name
				, c.item_code
				, c.valid_start_dtm
				, c.valid_end_dtm
				, a.ctgr_node_uuid 
	        FROM
	        	tb_ctgr_node_m a
	        LEFT JOIN
	        	tb_ctgr_item_rel_d b ON a.ctgr_node_uuid = b.ctgr_node_uuid
	        LEFT JOIN
	        	tb_item_mpng_d c ON b.obj_uuid = c.obj_uuid
	        JOIN
	        	SubItems d ON a.hpst_ctgr_node_uuid = d.ctgr_node_uuid
	    )
	    SELECT 
	    	obj_uuid
			, obj_code
			, obj_name
			, item_code
			, valid_start_dtm
			, valid_end_dtm
	    FROM
	    	SubItems
	    WHERE
	    	obj_uuid is not null
    </select>
    
    <select id="retrieveCatgegoryTabs" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.tab.CategoryTabDto">
	    SELECT
	        a.ctgr_tab_uuid
	        , a.ctgr_tab_name
	        , a.sort_no
	        , a.use_yn
	        , a.rgst_user
	        , a.rgst_dtm
	        , a.upd_user
	        , a.upd_dtm
	    FROM
	        tb_ctgr_tab_m a
		WHERE
			a.use_yn = 'Y'
		ORDER BY
			a.sort_no 
    </select>
    
    <insert id ="insertCtgrTab">
		INSERT INTO tb_ctgr_tab_m(ctgr_tab_uuid,ctgr_tab_name,sort_no,use_yn, rgst_user, rgst_dtm, upd_user, upd_dtm)
		VALUES (#{ctgrTabUuid}, #{ctgrTabName}, #{sortNo}, #{useYn}, #{rgstUser}, now(), #{updUser}, now())
	</insert>
	
	<update id ="updateCtgrTab">
		UPDATE tb_ctgr_tab_m
		<set>
			ctgr_tab_name = #{ctgrTabName},
			use_yn = #{useYn},
			upd_dtm = now()
		</set>
		WHERE ctgr_tab_uuid = #{ctgrTabUuid}
	</update>
	
	<select id="findTabSeq" resultType="java.lang.Integer">
		SELECT sort_no
        FROM tb_ctgr_tab_m t
		order by sort_no desc
	</select>
	
	<insert id ="insertCtgrNode">
		INSERT INTO tb_ctgr_node_m(ctgr_node_uuid, ctgr_tab_uuid, ctgr_node_name, tcls_ctgr_yn, chg_dept_name, chg_user, ctgr_ovw_cntn, use_yn, rgst_user, rgst_dtm, upd_user, upd_dtm)
		VALUES (uuid(), #{ctgrTabUuid}, #{ctgrNodeName}, #{tclsCtgrYn}, #{chgDeptName}, #{chgUser}, #{ctgrOvwCntn}, #{useYn}, #{rgstUser}, now(), #{updUser}, now())
	</insert>
	
	<update id ="updateCtgrNode">
		UPDATE tb_ctgr_node_m
		<set>
			ctgr_node_name = #{ctgrNodeName},
			ctgr_ovw_cntn = #{ctgrOvwCntn},
			chg_dept_name = #{chgDeptName},
			chg_user = #{chgUser},
			use_yn = #{useYn},
			upd_dtm = now()
		</set>
		WHERE ctgr_node_uuid = #{ctgrNodeUuid}
	</update>
	
	<select id="findTreeView" resultType="com.lgcns.svcp.prod.ui.prod.dto.attribute.TreeViewDto">
		SELECT t1.ctgr_node_uuid, t.ctgr_tab_uuid, t1.ctgr_node_name, t1.chg_dept_name, t1.chg_user, t1.ctgr_ovw_cntn, t.rgst_dtm as rgst_dtm_origin
        FROM tb_ctgr_tab_m t
		inner join tb_ctgr_node_m t1 on t.ctgr_tab_uuid = t1.ctgr_tab_uuid
		where t.ctgr_tab_name = #{ctgrTabName} and t1.tcls_ctgr_yn = 'Y'
		order by t1.rgst_dtm asc
	</select>
	
	<insert id="saveCategoryDescriptionInAttribute">
	    INSERT INTO tb_ctgr_level_d (
	        ctgr_tab_uuid
	        , level_no
	        , level_dscr_cntn
	        , rgst_user
	        , rgst_dtm
	        , upd_user
	        , upd_dtm
	    )
	    VALUES (
	        #{ctgrTabUuid}
	        , #{levelNo}
	        , #{levelDscrCntn}
	        , #{rgstUser}
	        , now()
	        , #{updUser}
	        , now()
	    )
	</insert>
    
    <insert id="saveCategoryDescription">
	    INSERT INTO tb_ctgr_level_d (
	        ctgr_tab_uuid
	        , level_no
	        , level_dscr_cntn
	        , rgst_user
	        , rgst_dtm
	        , upd_user
	        , upd_dtm
	    )
	    VALUES (
	        #{ctgrTabUuid}
	        , #{levelNo}
	        , #{levelDscrCntn}
	        , #{rgstUser}
	        , #{rgstDtm}
	        , #{updUser}
	        , #{updDtm}
	    )
		ON DUPLICATE KEY UPDATE
			level_dscr_cntn = VALUES(level_dscr_cntn)
			, upd_user = VALUES(upd_user)
			, upd_dtm = VALUES(upd_dtm)
	</insert>
	
	<insert id="saveCatgegoryTree">
	    INSERT INTO tb_ctgr_node_m (
	        ctgr_node_uuid
	        , ctgr_tab_uuid
	        , ctgr_node_name
	        , hpst_ctgr_node_uuid
	        , tcls_ctgr_yn
	        , chg_dept_name
	        , chg_user
	        , ctgr_ovw_cntn
	        , use_yn
	        , rgst_user
	        , rgst_dtm
	        , upd_user
	        , upd_dtm
	    )
	    VALUES (
	        #{ctgrNodeUuid}
	        , #{ctgrTabUuid}
	        , #{ctgrNodeName}
	        , #{hpstCtgrNodeUuid}
	        , #{tclsCtgrYn}
	        , #{chgDeptName}
	        , #{chgUser}
	        , #{ctgrOvwCntn}
	        , #{useYn}
	        , #{rgstUser}
	        , #{rgstDtm}
	        , #{updUser}
	        , #{updDtm}
	    )
		ON DUPLICATE KEY UPDATE
			ctgr_node_name = VALUES(ctgr_node_name)
			, ctgr_ovw_cntn = VALUES(ctgr_ovw_cntn)
			, use_yn = VALUES(use_yn)
			, upd_user = VALUES(upd_user)
			, upd_dtm = VALUES(upd_dtm)
	</insert>
	
	<update id="moveCatgegoryOfferRel">
	    UPDATE tb_ctgr_item_rel_d
	    <set>
	        ctgr_node_uuid = #{ctgrNodeUuid}
	        , vald_strt_dtm = #{valdStrtDtm}
	        , vald_end_dtm = #{valdEndDtm}
	        , upd_user = #{updUser}
	        , upd_dtm = #{updDtm}
	    </set>
	    WHERE
	        obj_uuid = #{objUuid}
	        AND ctgr_node_uuid = #{oldCtgrNodeUuid}
	</update>
	
	<select id="retrievePathInfo" resultType="string">
        WITH RECURSIVE pathInfo AS (
	      SELECT 
		      tcnm.ctgr_node_uuid
		      , tcnm.ctgr_node_name
		      , tcnm.hpst_ctgr_node_uuid
		      , 1 as level
	      FROM
	      	tb_ctgr_node_m tcnm 
	      WHERE
	      	tcnm.ctgr_node_uuid = #{ctgrNodeUuid}
	      	AND tcnm.use_yn = 'Y'
	
	      UNION ALL
	
	      SELECT 
		      tcnm.ctgr_node_uuid
		      , tcnm.ctgr_node_name
		      , tcnm.hpst_ctgr_node_uuid
		      , pif.level + 1 AS level
	      FROM
	      	tb_ctgr_node_m tcnm
	      JOIN
	      	pathInfo pif ON pif.hpst_ctgr_node_uuid = tcnm.ctgr_node_uuid
	      WHERE
	      	tcnm.use_yn = 'Y'
	    )
	    SELECT
	    	pif.ctgr_node_name
	    FROM
	    	pathInfo pif
	    ORDER BY
	    	pif.level DESC
    </select>
    
    <select id="retrieveCtgrOfOffer" resultType="string">
	    SELECT
	        a.ctgr_node_uuid
	    FROM
	        tb_ctgr_item_rel_d a
	    WHERE
	    	obj_uuid = #{objUuid}
	</select>
	
	<select id="retrieveCategoryNodeName" resultType="string">
	   	SELECT
	       b.ctgr_node_name 
	    FROM
	        tb_ctgr_item_rel_d a
		inner JOIN 
			tb_ctgr_node_m b ON a.ctgr_node_uuid = b.ctgr_node_uuid
	    WHERE
	    	a.obj_uuid = #{objUuid}
	</select>

    <select id="retrieveCtgrName" resultType="string">
	    SELECT
	        a.ctgr_node_name
	    FROM
	        tb_ctgr_node_m a
	    WHERE
	    	ctgr_node_uuid = #{objUuid}
	</select>
</mapper>
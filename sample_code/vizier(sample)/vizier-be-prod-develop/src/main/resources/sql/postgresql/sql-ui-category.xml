<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Ui-category">

  <select id="getCountCatgM" resultType="int">
    <![CDATA[
    SELECT
    count(1)
    FROM tb_ctgr_node_m
    WHERE
    hpst_ctgr_node_uuid = #{ctgrNodeUuid}
    ]]>
  </select>

  <select id="retrieveProdMByCatgMUuid" resultType="com.lgcns.svcp.prod.ui.prod.dto.offer.OfferOfLeafNodeDto">
	SELECT
	    c.ctgr_node_uuid,
	    b.obj_uuid AS prod_uuid,
	    b.obj_code AS prod_cd,
	    b.obj_name AS prod_nm,
	    a.valid_start_dtm,
	    a.valid_end_dtm
	FROM tb_ctgr_item_rel_d a
	INNER JOIN tb_item_mpng_d b ON a.obj_uuid = b.obj_uuid
	INNER JOIN tb_ctgr_node_m c ON a.ctgr_node_uuid = c.ctgr_node_uuid
	WHERE c.ctgr_tab_uuid = #{ctgrTabUuid}
	    AND a.ctgr_node_uuid = #{ctgrNodeUuid}
	    AND c.use_yn = 'Y'
	    AND (a.valid_end_dtm IS NULL OR a.valid_end_dtm >= CURRENT_TIMESTAMP)
	    AND (b.valid_end_dtm IS NULL OR b.valid_end_dtm >= CURRENT_TIMESTAMP)
	ORDER BY
		b.upd_dtm DESC
  </select>

    <select id="retrieveCategoryTreeWithOfferCounts" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.CategoryTreeDto">
			WITH RECURSIVE CategoryTree AS (
			    SELECT
	                a.ctgr_node_uuid
			        , a.ctgr_tab_uuid
			        , a.ctgr_node_name
			        , a.hpst_ctgr_node_uuid
			        , a.tcls_ctgr_yn
			        , a.chg_dept_name
			        , a.chg_user
			        , a.ctgr_ovw_cntn
			        , a.use_yn
			        , a.rgst_user
			        , a.rgst_dtm
			        , a.upd_user
			        , a.upd_dtm
			        , 1 AS level
			    FROM
			    	tb_ctgr_node_m a
			    WHERE
			        tcls_ctgr_yn = 'Y'
			        AND use_yn ='Y'
			        AND ctgr_tab_uuid = #{ctgrTabUuid}
			    UNION ALL
			    SELECT
			        b.ctgr_node_uuid
			        , b.ctgr_tab_uuid
			        , b.ctgr_node_name
			        , b.hpst_ctgr_node_uuid
			        , b.tcls_ctgr_yn
			        , b.chg_dept_name
			        , b.chg_user
			        , b.ctgr_ovw_cntn
			        , b.use_yn
			        , b.rgst_user
			        , b.rgst_dtm
			        , b.upd_user
			        , b.upd_dtm
			        , ct.level + 1 AS level
			    FROM
			        tb_ctgr_node_m b
			    INNER JOIN
			        CategoryTree ct ON b.hpst_ctgr_node_uuid = ct.ctgr_node_uuid
			    WHERE
			        b.use_yn ='Y'
				),
				LeafNodeProducts AS (
				    SELECT
				        a.ctgr_node_uuid
				        , COUNT(*) AS offer_count
				    FROM
				        tb_ctgr_item_rel_d a
					JOIN
					  	tb_ctgr_node_m b ON a.ctgr_node_uuid = b.ctgr_node_uuid
         			JOIN
            			tb_item_mpng_d c ON a.obj_uuid = c.obj_uuid
					WHERE
						b.ctgr_tab_uuid = #{ctgrTabUuid}
						AND b.use_yn = 'Y'
						AND (a.valid_end_dtm IS NULL OR a.valid_end_dtm >= CURRENT_TIMESTAMP)
						AND (c.valid_end_dtm IS NULL OR c.valid_end_dtm >= CURRENT_TIMESTAMP)
				    GROUP BY
				        a.ctgr_node_uuid
				),
				CategoryProductCounts AS (
				    SELECT
		                ct.ctgr_node_uuid
				        , ct.ctgr_tab_uuid
				        , ct.ctgr_node_name
				        , ct.hpst_ctgr_node_uuid
				        , ct.tcls_ctgr_yn
				        , ct.chg_dept_name
				        , ct.chg_user
				        , ct.ctgr_ovw_cntn
				        , ct.use_yn
				        , ct.rgst_user
				        , ct.rgst_dtm
				        , ct.upd_user
				        , ct.upd_dtm
				        , ct.level
				        , COALESCE(lnp.offer_count, 0) AS direct_offer_count
				    FROM
				        CategoryTree ct
				    LEFT JOIN
				        LeafNodeProducts lnp ON ct.ctgr_node_uuid = lnp.ctgr_node_uuid
				),
				AggregatedProductCounts AS (
				    SELECT
	                	cpc.ctgr_node_uuid
				        , cpc.ctgr_tab_uuid
				        , cpc.ctgr_node_name
				        , cpc.hpst_ctgr_node_uuid
				        , cpc.tcls_ctgr_yn
				        , cpc.chg_dept_name
				        , cpc.chg_user
				        , cpc.ctgr_ovw_cntn
				        , cpc.use_yn
				        , cpc.rgst_user
				        , cpc.rgst_dtm
				        , cpc.upd_user
				        , cpc.upd_dtm
				        , cpc.level
				        , CASE WHEN cpc.direct_offer_count > 0 THEN 'Y' ELSE 'N' END AS is_leaf_category_node
				        , cpc.direct_offer_count
				        , cpc.direct_offer_count AS total_offer_count
				    FROM
				        CategoryProductCounts cpc
				    UNION ALL
				    SELECT
				        cpc.ctgr_node_uuid
				        , cpc.ctgr_tab_uuid
				        , cpc.ctgr_node_name
				        , cpc.hpst_ctgr_node_uuid
				        , cpc.tcls_ctgr_yn
				        , cpc.chg_dept_name
				        , cpc.chg_user
				        , cpc.ctgr_ovw_cntn
				        , cpc.use_yn
				        , cpc.rgst_user
				        , cpc.rgst_dtm
				        , cpc.upd_user
				        , cpc.upd_dtm
				        , cpc.level
				        , CASE WHEN cpc.direct_offer_count > 0 THEN 'Y' ELSE 'N' END AS is_leaf_category_node
				        , cpc.direct_offer_count
				        , apc.total_offer_count + cpc.direct_offer_count AS total_offer_count
				    FROM
				        CategoryProductCounts cpc
				    INNER JOIN
				        AggregatedProductCounts apc ON cpc.ctgr_node_uuid = apc.hpst_ctgr_node_uuid
			)
			SELECT
	            c.ctgr_node_uuid
		        , c.ctgr_tab_uuid
		        , c.ctgr_node_name
		        , c.hpst_ctgr_node_uuid
		        , c.tcls_ctgr_yn
		        , c.chg_dept_name
		        , c.chg_user
		        , c.ctgr_ovw_cntn
		        , c.use_yn
			    , CASE 
			        WHEN c.ctgr_node_uuid NOT IN (SELECT d.hpst_ctgr_node_uuid FROM tb_ctgr_node_m d WHERE d.hpst_ctgr_node_uuid = c.ctgr_node_uuid) 
			        THEN 'Y' ELSE 'N'
			    END AS is_leaf_category_node
			    , COALESCE(SUM(apc.total_offer_count), 0) AS total_offer_count
			    , c.level
			    , c.rgst_user
			    , c.rgst_dtm
			    , c.upd_user
			    , c.upd_dtm
			FROM
			    CategoryProductCounts c
			LEFT JOIN
			    AggregatedProductCounts apc ON c.ctgr_node_uuid = apc.ctgr_node_uuid
			GROUP BY
			    c.ctgr_node_uuid
		        , c.ctgr_tab_uuid
		        , c.ctgr_node_name
		        , c.hpst_ctgr_node_uuid
		        , c.tcls_ctgr_yn
		        , c.chg_dept_name
		        , c.chg_user
		        , c.ctgr_ovw_cntn
		        , c.use_yn
			    , c.level
			    , c.rgst_user
			    , c.rgst_dtm
			    , c.upd_user
			    , c.upd_dtm
			ORDER BY
			    total_offer_count DESC
			    , c.rgst_dtm
    </select>
    
  <select id="retrieveCategoryPathWithOffer" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.CategoryPathDto">
	WITH RECURSIVE CategoryTree AS (
	    SELECT
	        ctgr_node_uuid AS catg_uuid,
	        hpst_ctgr_node_uuid AS hpos_catg_uuid,
	        ctgr_node_name AS level1,
	        NULL::VARCHAR AS level2,
	        NULL::VARCHAR AS level3,
	        NULL::VARCHAR AS level4,
	        NULL::VARCHAR AS level5,
	        1 AS level
	    FROM tb_ctgr_node_m
	    WHERE 
	        tcls_ctgr_yn = 'Y'
	        AND use_yn = 'Y'
	        AND ctgr_tab_uuid = #{ctgrTabUuid}
	    UNION ALL
	    SELECT
	        c.ctgr_node_uuid,
	        c.hpst_ctgr_node_uuid,
	        p.level1,
	        CASE WHEN p.level = 1 THEN c.ctgr_node_name ELSE p.level2 END,
	        CASE WHEN p.level = 2 THEN c.ctgr_node_name ELSE p.level3 END,
	        CASE WHEN p.level = 3 THEN c.ctgr_node_name ELSE p.level4 END,
	        CASE WHEN p.level = 4 THEN c.ctgr_node_name ELSE p.level5 END,
	        p.level + 1
	    FROM tb_ctgr_node_m c
	    JOIN CategoryTree p ON c.hpst_ctgr_node_uuid = p.catg_uuid
	    WHERE c.use_yn = 'Y' AND p.level <![CDATA[ < ]]> 5
	),
	RecursiveDescendants AS (
	    SELECT catg_uuid AS ancestor_uuid, catg_uuid AS descendant_uuid
	    FROM CategoryTree
	    UNION ALL
	    SELECT r.ancestor_uuid, t.catg_uuid
	    FROM CategoryTree t
	    JOIN RecursiveDescendants r ON t.hpos_catg_uuid = r.descendant_uuid
	),
	OfferAggregation AS (
	    SELECT
	        rd.ancestor_uuid,
	        COUNT(DISTINCT i.obj_uuid) AS total_offers
	    FROM RecursiveDescendants rd
	    JOIN tb_ctgr_item_rel_d r ON rd.descendant_uuid = r.ctgr_node_uuid
	    JOIN tb_item_mpng_d i ON i.obj_uuid = r.obj_uuid
	    WHERE
	        (r.valid_end_dtm IS NULL OR r.valid_end_dtm >= CURRENT_TIMESTAMP)
	        AND (i.valid_end_dtm IS NULL OR i.valid_end_dtm >= CURRENT_TIMESTAMP)
	    GROUP BY rd.ancestor_uuid
	),
	LeafNodes AS (
	    SELECT t.*
	    FROM CategoryTree t
	    LEFT JOIN CategoryTree c ON t.catg_uuid = c.hpos_catg_uuid
	    WHERE c.catg_uuid IS NULL
	),
	Ancestors AS (
	    SELECT
	        catg_uuid,
	        level,
	        COALESCE((
	            SELECT catg_uuid FROM CategoryTree 
	            WHERE level = 1 AND (
	                t.level = 1 AND catg_uuid = t.catg_uuid 
	                OR t.level > 1 AND catg_uuid = (
	                    WITH RECURSIVE Anc AS (
	                        SELECT catg_uuid, hpos_catg_uuid, level
	                        FROM CategoryTree
	                        WHERE catg_uuid = t.catg_uuid
	                        UNION ALL
	                        SELECT c.catg_uuid, c.hpos_catg_uuid, c.level
	                        FROM CategoryTree c
	                        JOIN Anc a ON a.hpos_catg_uuid = c.catg_uuid
	                    )
	                    SELECT catg_uuid FROM Anc WHERE level = 1 LIMIT 1
	                )
	            )
	        ), t.catg_uuid) AS level1_uuid,
	        COALESCE((
	            SELECT catg_uuid FROM CategoryTree 
	            WHERE level = 2 AND (
	                t.level <![CDATA[ <= ]]> 2 AND catg_uuid = t.catg_uuid 
	                OR t.level > 2 AND catg_uuid = (
	                    WITH RECURSIVE Anc AS (
	                        SELECT catg_uuid, hpos_catg_uuid, level
	                        FROM CategoryTree
	                        WHERE catg_uuid = t.catg_uuid
	                        UNION ALL
	                        SELECT c.catg_uuid, c.hpos_catg_uuid, c.level
	                        FROM CategoryTree c
	                        JOIN Anc a ON a.hpos_catg_uuid = c.catg_uuid
	                    )
	                    SELECT catg_uuid FROM Anc WHERE level = 2 LIMIT 1
	                )
	            )
	        ), t.catg_uuid) AS level2_uuid,
	        COALESCE((
	            SELECT catg_uuid FROM CategoryTree 
	            WHERE level = 3 AND (
	                t.level <![CDATA[ <= ]]> 3 AND catg_uuid = t.catg_uuid 
	                OR t.level > 3 AND catg_uuid = (
	                    WITH RECURSIVE Anc AS (
	                        SELECT catg_uuid, hpos_catg_uuid, level
	                        FROM CategoryTree
	                        WHERE catg_uuid = t.catg_uuid
	                        UNION ALL
	                        SELECT c.catg_uuid, c.hpos_catg_uuid, c.level
	                        FROM CategoryTree c
	                        JOIN Anc a ON a.hpos_catg_uuid = c.catg_uuid
	                    )
	                    SELECT catg_uuid FROM Anc WHERE level = 3 LIMIT 1
	                )
	            )
	        ), t.catg_uuid) AS level3_uuid,
	        COALESCE((
	            SELECT catg_uuid FROM CategoryTree 
	            WHERE level = 4 AND (
	                t.level <![CDATA[ <= ]]> 4 AND catg_uuid = t.catg_uuid 
	                OR t.level > 4 AND catg_uuid = (
	                    WITH RECURSIVE Anc AS (
	                        SELECT catg_uuid, hpos_catg_uuid, level
	                        FROM CategoryTree
	                        WHERE catg_uuid = t.catg_uuid
	                        UNION ALL
	                        SELECT c.catg_uuid, c.hpos_catg_uuid, c.level
	                        FROM CategoryTree c
	                        JOIN Anc a ON a.hpos_catg_uuid = c.catg_uuid
	                    )
	                    SELECT catg_uuid FROM Anc WHERE level = 4 LIMIT 1
	                )
	            )
	        ), t.catg_uuid) AS level4_uuid,
	        COALESCE((
	            SELECT catg_uuid FROM CategoryTree 
	            WHERE level = 5 AND (
	                t.level <![CDATA[ <= ]]> 5 AND catg_uuid = t.catg_uuid 
	                OR t.level > 5 AND catg_uuid = (
	                    WITH RECURSIVE Anc AS (
	                        SELECT catg_uuid, hpos_catg_uuid, level
	                        FROM CategoryTree
	                        WHERE catg_uuid = t.catg_uuid
	                        UNION ALL
	                        SELECT c.catg_uuid, c.hpos_catg_uuid, c.level
	                        FROM CategoryTree c
	                        JOIN Anc a ON a.hpos_catg_uuid = c.catg_uuid
	                    )
	                    SELECT catg_uuid FROM Anc WHERE level = 5 LIMIT 1
	                )
	            )
	        ), t.catg_uuid) AS level5_uuid
	    FROM LeafNodes t
	),
	RankedLevels AS (
	    SELECT
	        t.*,
	        COALESCE(oa.total_offers, 0) AS total_offers,
	        COALESCE((SELECT total_offers FROM OfferAggregation WHERE ancestor_uuid = a.level1_uuid), 0) AS level1_total,
	        COALESCE((SELECT total_offers FROM OfferAggregation WHERE ancestor_uuid = a.level2_uuid), 0) AS level2_total,
	        COALESCE((SELECT total_offers FROM OfferAggregation WHERE ancestor_uuid = a.level3_uuid), 0) AS level3_total,
	        COALESCE((SELECT total_offers FROM OfferAggregation WHERE ancestor_uuid = a.level4_uuid), 0) AS level4_total,
	        COALESCE((SELECT total_offers FROM OfferAggregation WHERE ancestor_uuid = a.level5_uuid), 0) AS level5_total,
	        a.level1_uuid,
	        a.level2_uuid,
	        a.level3_uuid,
	        a.level4_uuid,
	        a.level5_uuid
	    FROM LeafNodes t
	    LEFT JOIN OfferAggregation oa ON t.catg_uuid = oa.ancestor_uuid
	    JOIN Ancestors a ON t.catg_uuid = a.catg_uuid
	),
	
	ValidOffers AS (
	    SELECT
	        t.catg_uuid,
	        t.level1,
	        t.level2,
	        t.level3,
	        t.level4,
	        t.level5,
	        t.level,
	        i.obj_code AS offer_cd,
	        i.obj_name AS offer_nm,
	        t.total_offers,
	        t.level1_total,
	        t.level2_total,
	        t.level3_total,
	        t.level4_total,
	        t.level5_total,
	        t.level1_uuid,
	        t.level2_uuid,
	        t.level3_uuid,
	        t.level4_uuid,
	        t.level5_uuid,
	        i.upd_dtm
	    FROM RankedLevels t
	    JOIN tb_ctgr_item_rel_d r ON t.catg_uuid = r.ctgr_node_uuid
	    JOIN tb_item_mpng_d i ON i.obj_uuid = r.obj_uuid
	    WHERE
	        (r.valid_end_dtm IS NULL OR r.valid_end_dtm >= CURRENT_TIMESTAMP)
	        AND (i.valid_end_dtm IS NULL OR i.valid_end_dtm >= CURRENT_TIMESTAMP)
		    <if test="ctgrNodeName != null and ctgrNodeName != ''">
		        AND (
		            UPPER(t.level1) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
		            OR UPPER(t.level2) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
		            OR UPPER(t.level3) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
		            OR UPPER(t.level4) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
		            OR UPPER(t.level5) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
		        )
		    </if>
		    <if test="offerCd != null and offerCd != ''">
		        AND i.obj_code LIKE '%' || UPPER(#{offerCd}) || '%'
		    </if>
		    <if test="offerNm != null and offerNm != ''">
		        AND UPPER(i.obj_name) LIKE '%' || UPPER(#{offerNm}) || '%'
		    </if>
	),
	
	NoOffers AS (
	    SELECT
	        t.catg_uuid,
	        t.level1,
	        t.level2,
	        t.level3,
	        t.level4,
	        t.level5,
	        t.level,
	        NULL::VARCHAR AS offer_cd,
	        NULL::VARCHAR AS offer_nm,
	        0 AS total_offers,
	        t.level1_total,
	        t.level2_total,
	        t.level3_total,
	        t.level4_total,
	        t.level5_total,
	        t.level1_uuid,
	        t.level2_uuid,
	        t.level3_uuid,
	        t.level4_uuid,
	        t.level5_uuid,
	        NULL::timestamp AS upd_dtm
	    FROM RankedLevels t
	    WHERE NOT EXISTS (
	        SELECT 1
	        FROM tb_ctgr_item_rel_d r
	        JOIN tb_item_mpng_d i ON i.obj_uuid = r.obj_uuid
	        WHERE r.ctgr_node_uuid = t.catg_uuid
	          AND (r.valid_end_dtm IS NULL OR r.valid_end_dtm >= CURRENT_TIMESTAMP)
	          AND (i.valid_end_dtm IS NULL OR i.valid_end_dtm >= CURRENT_TIMESTAMP)
	    )
	    <if test="ctgrNodeName != null and ctgrNodeName != ''">
	        AND (
	            UPPER(t.level1) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
	            OR UPPER(t.level2) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
	            OR UPPER(t.level3) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
	            OR UPPER(t.level4) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
	            OR UPPER(t.level5) LIKE '%' || UPPER(#{ctgrNodeName}) || '%'
	        )
	    </if>
	)
	
	
	SELECT *
	FROM (
	    SELECT * FROM ValidOffers
	    <if test="(offerCd == null or offerCd == '') and (offerNm == null or offerNm == '')">
	        UNION ALL
	        SELECT * FROM NoOffers
	    </if>
	) AS final_result
	ORDER BY
	    level1_total DESC,
	    level1_uuid,
	    level2_total DESC,
	    level2_uuid,
	    level3_total DESC,
	    level3_uuid,
	    level4_total DESC,
	    level4_uuid,
	    level5_total DESC,
	    level5_uuid,
	    total_offers DESC,
	    catg_uuid,
	    upd_dtm DESC NULLS FIRST
  </select>

  <select id="retrieveCategoryDescription" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.CategoryDescriptionDto">
    <![CDATA[
    SELECT
    ctgr_tab_uuid as item_type_id
    ,MAX(CASE WHEN level_no = 1 THEN level_dscr_cntn ELSE NULL END) AS level1
    ,MAX(CASE WHEN level_no = 2 THEN level_dscr_cntn ELSE NULL END) AS level2
    ,MAX(CASE WHEN level_no = 3 THEN level_dscr_cntn ELSE NULL END) AS level3
    ,MAX(CASE WHEN level_no = 4 THEN level_dscr_cntn ELSE NULL END) AS level4
    ,MAX(CASE WHEN level_no = 5 THEN level_dscr_cntn ELSE NULL END) AS level5
    ,MAX(CASE WHEN level_no = 6 THEN level_dscr_cntn ELSE NULL END) AS level6
    FROM tb_ctgr_level_d
    WHERE
    ctgr_tab_uuid = #{ctgrTabUuid}
    GROUP BY
    ctgr_tab_uuid
    ]]>
  </select>

  <select id="retrieveOfferMWithCategoryList" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.ProdMWithCatgUuid">
	SELECT
	    a.ctgr_node_uuid,
	    c.obj_uuid AS prod_uuid,
	    c.obj_code AS prod_cd,
	    c.obj_name AS prod_nm,
	    b.valid_start_dtm,
	    b.valid_end_dtm,
	    b.rgst_user,
	    b.rgst_dtm,
	    b.upd_user,
	    b.upd_dtm
	FROM tb_ctgr_node_m a
	INNER JOIN tb_ctgr_item_rel_d b ON a.ctgr_node_uuid = b.ctgr_node_uuid
	INNER JOIN tb_item_mpng_d c ON b.obj_uuid = c.obj_uuid
	WHERE a.ctgr_tab_uuid = #{ctgrTabUuid}
	    AND a.use_yn = 'Y'
	    AND (b.valid_end_dtm IS NULL OR b.valid_end_dtm >= CURRENT_TIMESTAMP)
	    AND (c.valid_end_dtm IS NULL OR c.valid_end_dtm >= CURRENT_TIMESTAMP)
	    <if test="offerNm != null and offerNm != ''">
	        AND UPPER(c.obj_name) LIKE '%' || UPPER(#{offerNm}) || '%'
	    </if>
	    <if test="offerCd != null and offerCd != ''">
	        AND c.obj_code LIKE '%' || UPPER(#{offerCd}) || '%'
	    </if>
	ORDER BY
		c.upd_dtm DESC
  </select>

  <select id="retrieveDeviceWithCategoryList" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.DeviceWithCatgUuid">
    select
    b.catg_uuid
    , a.prod_uuid
    , a.eqip_trm_cd
    , a.eqip_trm_nm
    , a.eqip_trm_kd_cd
    , a.eqip_trm_all_nm
    , a.manf_cd
    , a.dvic_no
    , a.eqip_trm_knd_cd
    , a.dvic_isu_yymm
    , a.flt_excg_psbl_yn
    , a.rent_psbl_yn
    , a.dvic_enpr_divs_cd
    , a.eqip_trm_divs_cd
    , a.biz_dtbn_lkge_yn
    , a.body_acso_divs_cd
    , a.eqip_trm_natv_cd
    , a.lnwl_clss_cd
    , a.wrls_trm_kd_cd
    , a.fscp_trm_yn
    , a.trm_cout_scdl_dtm
    , a.eqip_trm_vald_strt_dtm
    , a.eqip_trm_vald_end_dtm
    , a.rgst_usr
    , a.rgst_dtm
    , a.upd_usr
    , a.upd_dtm
    FROM tb_eqip_trm_m a
    join tb_catg_prod_item_d b on
    a.prod_uuid = b.prod_item_uuid
    <where>
        <if test="offerNm != null and offerNm != ''">
            AND UPPER(a.eqip_trm_nm) LIKE '%' || UPPER(#{offerNm}) || '%'
        </if>
        <if test="offerCd != null and offerCd != ''">
            AND a.eqip_trm_cd LIKE '%' || UPPER(#{offerCd}) || '%'
        </if>
    </where>
  </select>

  <insert id="insertCategoryRel">
    INSERT INTO tb_ctgr_item_rel_d (
        ctgr_node_uuid,
        obj_uuid,
        valid_start_dtm,
        valid_end_dtm,
        rgst_user,
        rgst_dtm,
        upd_user,
        upd_dtm
    )
    VALUES (
        #{ctgrNodeUuid},
        #{objUuid},
        CURRENT_TIMESTAMP,
        #{validEndDtm}::TIMESTAMP,
        #{rgstUser},
        CURRENT_TIMESTAMP,
        #{updUser},
        CURRENT_TIMESTAMP
    )
  </insert>

  <update id="updateCategoryRelByOfferUuid">
    UPDATE tb_ctgr_item_rel_d
    SET
        ctgr_node_uuid = #{ctgrNodeUuid},
        valid_end_dtm = #{validEndDtm}::TIMESTAMP,
        upd_user = #{updUser},
        upd_dtm = CURRENT_TIMESTAMP
    WHERE obj_uuid = #{objUuid}
  </update>

  <select id="retrieveOffersOfCatgegory" resultType="com.lgcns.svcp.prod.ui.prod.dto.ItemMappingDto">
    WITH RECURSIVE SubItems AS (
    SELECT
    c.obj_uuid
    , c.obj_code
    , c.obj_name
    , c.item_code
    , c.valid_start_dtm
    , c.valid_end_dtm
    , a.ctgr_node_uuid
    FROM tb_ctgr_node_m a
    LEFT JOIN tb_ctgr_item_rel_d b ON a.ctgr_node_uuid = b.ctgr_node_uuid
    LEFT JOIN tb_item_mpng_d c ON b.obj_uuid = c.obj_uuid
    WHERE
    a.ctgr_node_uuid = #{ctgrNodeUuid}
    UNION all
    SELECT
    c.obj_uuid
    , c.obj_code
    , c.obj_name
    , c.item_code
    , c.valid_start_dtm
    , c.valid_end_dtm
    , a.ctgr_node_uuid
    FROM tb_ctgr_node_m a
    LEFT JOIN tb_ctgr_item_rel_d b ON a.ctgr_node_uuid = b.ctgr_node_uuid
    LEFT JOIN tb_item_mpng_d c ON b.obj_uuid = c.obj_uuid
    JOIN subitems d ON a.hpst_ctgr_node_uuid = d.ctgr_node_uuid
    )
    SELECT
    obj_uuid
    , obj_code
    , obj_name
    , item_code
    , valid_start_dtm
    , valid_end_dtm
    FROM subitems
    WHERE
    obj_uuid is not null
  </select>

  <select id="retrieveCatgegoryTabs" resultType="com.lgcns.svcp.prod.ui.prod.dto.category.tab.CategoryTabDto">
    SELECT
    a.ctgr_tab_uuid
    , a.ctgr_tab_name
    , a.sort_no
    , a.use_yn
    , a.rgst_user
    , a.rgst_dtm
    , a.upd_user
    , a.upd_dtm
    FROM tb_ctgr_tab_m a
    WHERE
    a.use_yn = 'Y'
    ORDER BY
    a.sort_no
  </select>

  <insert id="insertCtgrTab">
    INSERT INTO tb_ctgr_tab_m(ctgr_tab_uuid,ctgr_tab_name,sort_no,use_yn, rgst_user, rgst_dtm, upd_user, upd_dtm)
    VALUES (#{ctgrTabUuid}, #{ctgrTabName}, #{sortNo}, #{useYn}, #{rgstUser}, CURRENT_TIMESTAMP, #{updUser}, CURRENT_TIMESTAMP)
  </insert>

  <update id="updateCtgrTab">
    UPDATE tb_ctgr_tab_m
    <set>
    ctgr_tab_name = #{ctgrTabName},
    use_yn = #{useYn},
    upd_dtm = CURRENT_TIMESTAMP
    </set>
    WHERE ctgr_tab_uuid = #{ctgrTabUuid}
  </update>

  <select id="findTabSeq" resultType="java.lang.Integer">
    SELECT sort_no
    FROM tb_ctgr_tab_m t
    order by sort_no desc
  </select>

  <insert id="insertCtgrNode">
    INSERT INTO tb_ctgr_node_m(ctgr_node_uuid, ctgr_tab_uuid, ctgr_node_name, tcls_ctgr_yn, chg_dept_name, chg_user, ctgr_ovw_cntn, use_yn, rgst_user, rgst_dtm, upd_user, upd_dtm)
    VALUES (gen_random_uuid(), #{ctgrTabUuid}, #{ctgrNodeName}, #{tclsCtgrYn}, #{chgDeptName}, #{chgUser}, #{ctgrOvwCntn}, #{useYn}, #{rgstUser}, CURRENT_TIMESTAMP, #{updUser}, CURRENT_TIMESTAMP)
  </insert>

  <update id="updateCtgrNode">
    UPDATE tb_ctgr_node_m
    <set>
    ctgr_node_name = #{ctgrNodeName},
    ctgr_ovw_cntn = #{ctgrOvwCntn},
    chg_dept_name = #{chgDeptName},
    chg_user = #{chgUser},
    use_yn = #{useYn},
    upd_dtm = CURRENT_TIMESTAMP
    </set>
    WHERE ctgr_node_uuid = #{ctgrNodeUuid}
  </update>

  <select id="findTreeView" resultType="com.lgcns.svcp.prod.ui.prod.dto.attribute.TreeViewDto">
    SELECT t1.ctgr_node_uuid, t.ctgr_tab_uuid, t1.ctgr_node_name, t1.chg_dept_name, t1.chg_user, t1.ctgr_ovw_cntn, t.rgst_dtm as rgst_dtm_origin
    FROM tb_ctgr_tab_m t
    inner join tb_ctgr_node_m t1 on t.ctgr_tab_uuid = t1.ctgr_tab_uuid
    where t.ctgr_tab_name = #{ctgrTabName} and t1.tcls_ctgr_yn = 'Y'
    order by t1.rgst_dtm asc
  </select>


<insert id="saveCategoryDescriptionInAttribute">
    INSERT INTO tb_ctgr_level_d (
    ctgr_tab_uuid
    , level_no
    , level_dscr_cntn
    , rgst_user
    , rgst_dtm
    , upd_user
    , upd_dtm
    )
    VALUES (
    #{ctgrTabUuid}
    , #{levelNo}::INTEGER
    , #{levelDscrCntn}
    , #{rgstUser}
    , CURRENT_TIMESTAMP
    , #{updUser}
    , CURRENT_TIMESTAMP
    )
</insert>


<insert id="saveCategoryDescription">
    INSERT INTO tb_ctgr_level_d (
    ctgr_tab_uuid
    , level_no
    , level_dscr_cntn
    , rgst_user
    , rgst_dtm
    , upd_user
    , upd_dtm
    )
    VALUES (
    #{ctgrTabUuid}
    , #{levelNo}::INTEGER
    , #{levelDscrCntn}
    , #{rgstUser}
    , CURRENT_TIMESTAMP
    , #{updUser}
    , CURRENT_TIMESTAMP
    ) ON CONFLICT (ctgr_tab_uuid, level_no)
      DO UPDATE SET level_dscr_cntn = EXCLUDED.level_dscr_cntn
                  , upd_user        = EXCLUDED.upd_user
                  , upd_dtm         = CURRENT_TIMESTAMP
</insert>


<insert id="saveCatgegoryTree">
    INSERT INTO tb_ctgr_node_m (
    ctgr_node_uuid
    , ctgr_tab_uuid
    , ctgr_node_name
    , hpst_ctgr_node_uuid
    , tcls_ctgr_yn
    , chg_dept_name
    , chg_user
    , ctgr_ovw_cntn
    , use_yn
    , rgst_user
    , rgst_dtm
    , upd_user
    , upd_dtm
    )
    VALUES (
    #{ctgrNodeUuid}
    , #{ctgrTabUuid}
    , #{ctgrNodeName}
    , #{hpstCtgrNodeUuid}
    , #{tclsCtgrYn}
    , #{chgDeptName}
    , #{chgUser}
    , #{ctgrOvwCntn}
    , #{useYn}
    , #{rgstUser}
    , CURRENT_TIMESTAMP
    , #{updUser}
    , CURRENT_TIMESTAMP
    ) ON CONFLICT (ctgr_node_uuid) DO UPDATE SET ctgr_node_name = EXCLUDED.ctgr_node_name
    , ctgr_ovw_cntn = EXCLUDED.ctgr_ovw_cntn
    , use_yn = EXCLUDED.use_yn
    , upd_user = EXCLUDED.upd_user
    , upd_dtm = CURRENT_TIMESTAMP
</insert>

<update id="moveCatgegoryOfferRel">
    UPDATE tb_ctgr_item_rel_d
    <set>
        ctgr_node_uuid = #{ctgrNodeUuid},
        valid_start_dtm = #{validStartDtm}::TIMESTAMP,
        valid_end_dtm = #{validEndDtm}::TIMESTAMP,
        upd_user = #{updUser},
        upd_dtm = CURRENT_TIMESTAMP
    </set>
    WHERE
        obj_uuid = #{objUuid}
        AND ctgr_node_uuid = #{oldCtgrNodeUuid}
</update>

  <select id="retrievePathInfo" resultType="string">
    WITH RECURSIVE pathInfo AS (
    SELECT
    tcnm.ctgr_node_uuid
    , tcnm.ctgr_node_name
    , tcnm.hpst_ctgr_node_uuid
    , 1 as level
    FROM tb_ctgr_node_m tcnm
    WHERE
    tcnm.ctgr_node_uuid = #{ctgrNodeUuid}
    AND tcnm.use_yn = 'Y'
    UNION ALL
    SELECT
    tcnm.ctgr_node_uuid
    , tcnm.ctgr_node_name
    , tcnm.hpst_ctgr_node_uuid
    , pif.level + 1 AS level
    FROM tb_ctgr_node_m tcnm
    JOIN pathInfo pif ON pif.hpst_ctgr_node_uuid = tcnm.ctgr_node_uuid
    WHERE
    tcnm.use_yn = 'Y'
    )
    SELECT
    pif.ctgr_node_name
    FROM pathInfo pif
    ORDER BY
    pif.level DESC
  </select>

  <select id="retrieveCtgrOfOffer" resultType="string">
    SELECT
    a.ctgr_node_uuid
    FROM tb_ctgr_item_rel_d a
    WHERE
    obj_uuid = #{objUuid}
  </select>

  <select id="retrieveCategoryNodeName" resultType="string">
    SELECT
    b.ctgr_node_name
    FROM tb_ctgr_item_rel_d a
    inner JOIN tb_ctgr_node_m b ON a.ctgr_node_uuid = b.ctgr_node_uuid
    WHERE
    a.obj_uuid = #{objUuid}
  </select>

  <select id="retrieveCtgrName" resultType="string">
    SELECT
    a.ctgr_node_name
    FROM tb_ctgr_node_m a
    WHERE
    ctgr_node_uuid = #{objUuid}
  </select>

</mapper>